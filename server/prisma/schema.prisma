generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  username  String
  email     String   @unique
  password  String
  createdAt DateTime @default(now())
  addressId String?  @unique

  address         Address?  @relation(fields: [addressId], references: [id])
  orders          Order[]   @relation("BuyerOrders")
  sales           Order[]   @relation("SellerSales")
  ratingsGiven    Rating[]  @relation("UserGivenRatings")
  ratingsReceived Rating[]  @relation("UserReceivedRatings")
  productsForSale Product[]
}

model Address {
  id           String @id @default(uuid())
  street       String
  number       String
  neighborhood String
  city         String
  state        String
  zipCode      String
  latitude     Float
  longitude    Float

  user    User?
  partner Partner?
}

model Partner {
  id        String   @id @default(uuid())
  name      String
  addressId String?  @unique
  createdAt DateTime @default(now())

  address Address? @relation(fields: [addressId], references: [id])
  orders  Order[]
}

enum ProductStatus {
  AVAILABLE
  SOLD
  PENDING
}

model Product {
  id          String        @id @default(uuid())
  name        String
  description String
  size        String
  school      String
  condition   Int
  price       Float
  sellerId    String
  createdAt   DateTime      @default(now())
  status      ProductStatus @default(AVAILABLE)

  seller User    @relation(fields: [sellerId], references: [id])
  images Image[]
  order  Order?  @relation("ProductOrder")
}

model Image {
  id        String  @id @default(uuid())
  path      String
  productId String?

  product Product? @relation(fields: [productId], references: [id])
}

model Order {
  id          String    @id @default(uuid())
  listingId   String
  buyerId     String
  sellerId    String
  partnerId   String
  productId   String    @unique
  status      String
  createdAt   DateTime  @default(now())
  deliveredAt DateTime?
  confirmedAt DateTime?

  buyer   User    @relation("BuyerOrders", fields: [buyerId], references: [id])
  seller  User    @relation("SellerSales", fields: [sellerId], references: [id])
  partner Partner @relation(fields: [partnerId], references: [id])
  product Product @relation("ProductOrder", fields: [productId], references: [id])
}

model Rating {
  id         String   @id @default(uuid())
  fromUserId String
  toUserId   String
  score      Int
  comment    String?
  createdAt  DateTime @default(now())

  from User @relation("UserGivenRatings", fields: [fromUserId], references: [id])
  to   User @relation("UserReceivedRatings", fields: [toUserId], references: [id])
}
